name: CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      tags:
        description: 'Tags to push and deploy'
        required: true
        default: '*.*.*'
  push:
    tags:
      - '*.*.*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{env.REGISTRY}}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  pull-and-deploy:
    runs-on: self-hosted
    needs: build-and-push

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Container registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Setup Environment File
        run: |
          touch .env
          echo "NODE_ENV=production" >> .env
          echo "API_VERSION=${{ steps.meta.outputs.version }}" >> .env
          echo "AUTH0_DOMAIN=${{ secrets.AUTH0_DOMAIN }}" >> .env
          echo "AUTH0_AUDIENCE=${{ secrets.AUTH0_AUDIENCE }}" >> .env
          echo "DRIVERS_MOCKUP_API_URL=${{ secrets.DRIVERS_MOCKUP_API_URL }}" >> .env
          echo "DRIVERS_MOCKUP_API_KEY=${{ secrets.DRIVERS_MOCKUP_API_KEY }}" >> .env
          echo "PORT=${{ vars.PORT }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> .env
          echo "GOOGLE_APPLICATION_CREDENTIALS=service-account.json" >> .env
          touch service-account.json
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" | base64 -d > service-account.json

      - name: Pull image and Run image from ${{ env.REGISTRY }}
        run: |
          docker compose pull
          docker compose down
          docker compose up -d
